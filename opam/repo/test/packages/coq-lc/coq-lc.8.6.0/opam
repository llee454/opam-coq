opam-version: "2.0"
maintainer: "Hugo.Herbelin@inria.fr"
homepage: "https://github.com/coq-contribs/lc"
license: "LGPL 2.1"
build: [make "-j%{jobs}%"]
install: [make "install"]
remove: ["rm" "-R" "%{lib}%/coq/user-contrib/lc"]
depends: [
  "ocaml"
  "coq" {>= "8.6" & < "8.7~"}
]
tags: [ "keyword: Module" "keyword: Monad" "keyword: Category" "keyword: Lambda-calculus" "keyword: Higher-order syntax" "category: Computer Science/Lambda Calculi" "date: 2006-01-12" "date: 2008-09-9" ]
authors: [ "AndrÃ© Hirschowitz <ah@math.unice.fr> [http://math.unice.fr/~ah/]" "Marco Maggesi <maggesi@math.unifi.it> [http://www.math.unifi.it/~maggesi/]" ]
bug-reports: "https://github.com/coq-contribs/lc/issues"
dev-repo: "git+https://github.com/coq-contribs/lc.git"
synopsis: "Modules over monads and lambda-calculi."
description: """
http://www.math.unifi.it/~/maggesi/mechanized/

We define a notion of module over a monad and use it to
propose a new definition (or semantics) for abstract
syntax (with binding constructions). Using our notion of
module, we build a category of `exponential' monads,
which can be understood as the category of
lambda-calculi, and prove that it has an initial object
(the pure untyped lambda-calculus)."""
flags: light-uninstall
url {
  src: "https://github.com/coq-contribs/lc/archive/v8.6.0.tar.gz"
  checksum: "md5=a827e42c57b1b80f30c7160d05029321"
}
